@mixin button-size($padding, $font-size, $border-radius) {
  padding: $padding;
  font-size: $font-size;
  border-radius: $border-radius;
}

@mixin button-color($color, $background, $border) {
  color: $color;
  background-color: $background;
  border-color: $border;
  // a inside Button which only work in Chrome
  // http://stackoverflow.com/a/17253457
  > a:only-child {
    color: currentColor;
    &:after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      background: transparent;
    }
  }
}

@mixin button-variant($color, $background, $border) {
  @include button-color($color, $background, $border);

  &:hover,
  &:focus {
    @include button-color(tint($color, 20%), tint($background, 20%), tint($border, 20%));
  }
  &:active,
  &.active {
    @include button-color(shade($color, 20%), shade($background, 20%), shade($background, 20%));
  }

  &.disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    &:hover,
    &:focus,
    &:active,
    &.active {
      @include button-color($btn-disable-color, $btn-disable-bg, $btn-disable-border);
    }
  }
}

@mixin button-group-base($btnTagName, $btnClassName) {
  position: relative;
  display: inline-block;
  vertical-align: middle;
  > #{$btnTagName} {
    position: relative;
    float: left;
    & > .#{$btnClassName} {
      &:hover,
      &:focus,
      &:active,
      &.active {
        z-index: 2;
      }
    }
  }

  //size
  &-lg > #{$btnTagName} > .#{$btnClassName} {
    @include button-size($btn-padding-lg, $btn-font-size-lg, $border-radius-base);
  }

  &-sm > #{$btnTagName} > .#{$btnClassName} {
    @include button-size($btn-padding-sm, $font-size-base, $border-radius-sm);
    .#{$iconfont-css-prefix} {
      font-size: $font-size-base;
    }
  }
}


@mixin btn {
  display: inline-block;
  margin-bottom: 0;
  font-weight: $btn-font-weight;
  text-align: center;
  vertical-align: middle;
  touch-action: manipulation;
  cursor: pointer;
  background-image: none;
  border: 1px solid transparent;
  white-space: nowrap;
  line-height: $line-height-base;
  @include button-size($btn-padding-base, $font-size-base, $border-radius-base);
  user-select: none;
  transition: all .3s $ease-in-out;
  transform: translate3d(0, 0, 0);

  > .#{$iconfont-css-prefix} {
    line-height: 1;
  }

  &,
  &:active,
  &:focus {
    outline: 0;
  }

  &:not([disabled]):hover {
    text-decoration: none;
  }

  &:not([disabled]):active {
    outline: 0;
    transition: none;
  }

  &.disabled,
  &[disabled] {
    cursor: $cursor-disabled;
    > * {
      pointer-events: none;
    }
  }


  &-lg {
    @include button-size($btn-padding-lg, $btn-font-size-lg, $border-radius-base);
  }

  &-sm {
    @include button-size($btn-padding-sm, $font-size-base, $border-radius-sm);
  }
}

// primary button style
@mixin btn-primary {
  @include button-variant($btn-primary-color, $btn-primary-bg, $primary-color);

  &:hover,
  &:focus,
  &:active,
  &.active {
    color: $btn-primary-color;
  }
}

// default button style
@mixin btn-default {
  @include button-variant($btn-default-color, $btn-default-bg, $btn-default-border);

  &:hover,
  &:focus {
    @include button-color(tint($primary-color, 20%), white, tint($primary-color, 20%));
  }
  &:active,
  &.active {
    @include button-color(shade($primary-color, 5%), white, shade($primary-color, 5%));
  }
}

// ghost button style
@mixin btn-ghost {
@include button-variant($btn-ghost-color, $btn-ghost-bg, $btn-ghost-border);

  &:hover,
  &:focus {
    @include button-color(tint($primary-color, 20%), $btn-ghost-bg, tint($primary-color, 20%));
  }
  &:active,
  &.active {
    @include button-color(shade($primary-color, 5%), $btn-ghost-bg, shade($primary-color, 5%));
  }
}

@mixin btn-dashed {
  @include btn-ghost;
  border-style: dashed;
}

// circle button: the content only contains icon
@mixin btn-circle($btnClassName: btn) {
  @include square($btn-circle-size);
  @include button-size(0, $font-size-base + 2, 50%);

  &.#{$btnClassName}-lg {
     @include square($btn-circle-size-lg);
     @include button-size(0, $btn-font-size-lg + 2, 50%);
   }

  &.#{$btnClassName}-sm {
     @include square($btn-circle-size-sm);
     @include button-size(0, $font-size-base, 50%);
   }
}

// Horizontal button groups styl
// --------------------------------------------------
@mixin btn-group($btnTagName, $btnClassName: btn) {
  @include button-group-base($btnTagName, $btnClassName);

  #{$btnTagName} + #{$btnTagName},
  // TODO: use correct selector
  #{$btnClassName} + &,
  & + .#{$btnClassName},
  & + & {
    margin-left: -1px;
  }

  #{$btnTagName}:not(:first-child):not(:last-child) {
    .#{$btnClassName} {
      border-radius: 0;
      padding-left: 8px;
      padding-right: 8px;
    }
  }

  #{$btnTagName}:first-child {
    &:not(:last-child) {
      .#{$btnClassName} {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
        padding-right: 8px;
      }
    }
    .#{$btnClassName} {
      margin-left: 0;
    }
  }

  #{$btnTagName}:last-child:not(:first-child) {
    .#{$btnClassName} {
      border-bottom-left-radius: 0;
      border-top-left-radius: 0;
      padding-left: 8px;
    }
  }

  & & {
    float: left;
  }

  & &:not(:first-child):not(:last-child) > #{$btnTagName} > .#{$btnClassName} {
    border-radius: 0;
  }

  & &:first-child:not(:last-child) {
    #{$btnTagName}:last-child {
      .#{$btnClassName} {
        border-bottom-right-radius: 0;
        border-top-right-radius: 0;
        padding-right: 8px;
      }
    }
  }

  & &:last-child:not(:first-child) > #{$btnTagName}:first-child > .#{$btnClassName} {
     border-bottom-left-radius: 0;
     border-top-left-radius: 0;
     padding-left: 8px;
   }
}

